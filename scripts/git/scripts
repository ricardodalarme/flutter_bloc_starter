#!/bin/bash
set -e

FLUTTER=$(which flutter)

# colors
export RED='\033[0;31m'
export BLACK_ON_RED='\033[41m'
export BLUE='\033[0;34m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export BGMAGENTA='\033[0;45m'
export BOLD='\033[1m'
export NC='\033[0m' # No Color

function check_staged_files() {
  STAGED_FILES="$(git diff --cached --diff-filter=ACMR --oneline --name-only --relative)"
  if [ -z "$STAGED_FILES" ]; then
    echo "No files changed, nothing to check"
    return 1
  fi
}

function test_dependencies() {
  if ! [ -x "$(command -v "$FLUTTER")" ]; then
    printf '%bPlease install Flutter before running the hook%b\n' "$BLACK_ON_RED" "$NC"
    return 1
  fi
}

function call_format() {
  printf '\n%b%bRunning the Flutter formatter%b\n' "$YELLOW" "$BOLD" "$NC"

  if flutter format --dry-run --set-exit-if-changed . ; then
    printf '%b%bSUCCESS: Flutter format run successfully with no errors.%b\n' "$GREEN" "$BOLD" "$NC"
  else
    printf '%b%bFAILED: Fix flutter formatter errors and try again.%b\n' "$RED" "$BOLD" "$NC"
    return 1
  fi
}

function call_analyzer() {
  printf "\n\e[33;1m%s\e[0m\n" 'Running the Flutter analyzer'

  if flutter analyze ; then
    printf '%b%bSUCCESS: Flutter analyze run successfully with no errors.%b\n' "$GREEN" "$BOLD" "$NC"
  else
    printf '%b%bFAILED: Fix flutter analyzer errors and try again.%b\n' "$RED" "$BOLD" "$NC"
    return 1
  fi
}

function call_tests() {
  printf "\n\e[33;1m%s\e[0m\n" 'Running tests'

  if flutter test ; then
    printf '%b%bSUCCESS: Flutter test run successfully with no errors.%b\n' "$GREEN" "$BOLD" "$NC"
  else
    printf '%b%bFAILED: Fix flutter test errors and try again.%b\n' "$RED" "$BOLD" "$NC"
    return 1
  fi
}
