#!/bin/bash
set -e

FLUTTER=$(which flutter)

# Colors
RED='\033[0;31m'
BLACK_ON_RED='\033[41m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BOLD='\033[1m'
NC='\033[0m' # No Color

check_staged_files() {
  STAGED_FILES="$(git diff --cached --diff-filter=ACMR --oneline --name-only --relative)"
  if [ -z "$STAGED_FILES" ]; then
    echo "No files changed, nothing to check"
    return 1
  fi
}

check_flutter_installed() {
  if ! [ -x "$FLUTTER" ]; then
    printf '%bPlease install Flutter before running the hook%b\n' "$BLACK_ON_RED" "$NC"
    return 1
  fi
}

check_localization_files() {
  printf '\n%b%bChecking localization files%b\n' "$YELLOW" "$BOLD" "$NC"

  if melos run l10n:analyze ; then
    printf '%b%bSUCCESS: Localization files are valid.%b\n' "$GREEN" "$BOLD" "$NC"
  else
    printf '%b%bFAILED: Fix localization files and try again.%b\n' "$RED" "$BOLD" "$NC"
    return 1
  fi
}

run_flutter_format() {
  printf '\n%b%bRunning the Flutter formatter%b\n' "$YELLOW" "$BOLD" "$NC"

  if melos run format:no-output; then
    printf '%b%bSUCCESS: Flutter format run successfully with no errors.%b\n' "$GREEN" "$BOLD" "$NC"
  else
    printf '%b%bFAILED: Fix Flutter formatter errors and try again.%b\n' "$RED" "$BOLD" "$NC"
    return 1
  fi
}

run_flutter_analyzer() {
  printf "\n%b%bRunning the Flutter analyzer%b\n" "$YELLOW" "$BOLD" "$NC"

  if melos run analyze ; then
    printf '%b%bSUCCESS: Flutter analyze run successfully with no errors.%b\n' "$GREEN" "$BOLD" "$NC"
  else
    printf '%b%bFAILED: Fix Flutter analyzer errors and try again.%b\n' "$RED" "$BOLD" "$NC"
    return 1
  fi
}

run_flutter_tests() {
  printf "\n%b%bRunning tests%b\n" "$YELLOW" "$BOLD" "$NC"

  if melos run test ; then
    printf '%b%bSUCCESS: Flutter tests run successfully with no errors.%b\n' "$GREEN" "$BOLD" "$NC"
  else
    printf '%b%bFAILED: Fix Flutter test errors and try again.%b\n' "$RED" "$BOLD" "$NC"
    return 1
  fi
}
